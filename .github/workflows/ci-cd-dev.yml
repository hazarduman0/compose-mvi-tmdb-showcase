name: Dev CI (Sonar + Firebase Distribution)

on:
  push:
    branches:
      - dev

jobs:
  dev-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build project
        run: ./gradlew assembleDebug

      - name: Generate JaCoCo coverage report
        run: ./gradlew jacocoViewModelUnitTestReport

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Decode keystore and create local.properties
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > app/cinescope-release-key.jks
          echo "RELEASE_STORE_FILE=app/cinescope-release-key.jks" > local.properties
          echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}" >> local.properties
          echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> local.properties
          echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> local.properties

      - name: Fetch all history for versioning
        run: git fetch --prune --unshallow || true

      - name: Set versionCode and versionName
        run: |
          VERSION_CODE=$(git rev-list --count origin/dev)
          VERSION_NAME="1.0.0-dev-$VERSION_CODE"
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      - name: Build APK
        run: ./gradlew assembleDebug -PversionCode=${VERSION_CODE} -PversionName=${VERSION_NAME}

      - name: List APK files
        run: ls -lR app/build/outputs/apk/

      - name: Set APK Path
        run: echo "APK_PATH=app/build/outputs/apk/debug/app-debug.apk" >> $GITHUB_ENV

      - name: Upload APK to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          appId: ${{ secrets.FIREBASE_APP_ID }}
          groups: testers
          file: ${{ env.APK_PATH }}